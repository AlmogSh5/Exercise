{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/components/grid-card/grid-card.component.css","webpack:///./src/app/components/grid-card/grid-card.component.html","webpack:///./src/app/components/grid-card/grid-card.component.ts","webpack:///./src/app/movies.model.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nconst routes: Routes = [];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FwcC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Cloudinary Exercise\\n  </h1>\\n  <img width=\\\"300\\\" alt=\\\"IMDB Logo\\\" src=\\\"https://upload.wikimedia.org/wikipedia/commons/6/69/IMDB_Logo_2016.svg\\\">\\n</div>\\n\\n<app-grid-card *ngFor=\\\"let movie of moviesDb\\\"></app-grid-card>\\n\\n<router-outlet></router-outlet>\\n\"","import { Component, OnInit } from '@angular/core';\nimport {HttpParams, HttpClient} from '@angular/common/http';\nimport {IMovie, Movie} from './movies.model';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n  title = 'cloudinary-app';\n  moviesList: string[] = ['The Lion King', 'Monsters inc'];\n  // 'Harry Potter And The Goblet Of Fire', 'Interstellar',\n  // 'The Martian', 'Avengers: Endgame', 'Gaudians of the galaxy', 'Men in black'];\n\n  public moviesDb: IMovie[] = [];\n\n  constructor(private http: HttpClient) {}\n\n  async ngOnInit() {\n    for (const movie of this.moviesList) {\n      this.getMovieInfo(movie);\n    }\n  }\n\n  getMovieInfo(title: string): void {\n    const url = 'http://www.omdbapi.com/';\n    const params = new HttpParams()\n      .set('apikey', '9fbe3d30')\n      .set('t', title);\n\n    this.http.get(url, {params}).subscribe(data => {\n      this.moviesDb.push(new Movie(title, title, 1));\n    });\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { GridCardComponent } from './components/grid-card/grid-card.component';\nimport { HttpClient, HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    GridCardComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    AppRoutingModule\n  ],\n  providers: [HttpClient],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2NvbXBvbmVudHMvZ3JpZC1jYXJkL2dyaWQtY2FyZC5jb21wb25lbnQuY3NzIn0= */\"","module.exports = \"<p>\\n  grid-card works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-grid-card',\n  templateUrl: './grid-card.component.html',\n  styleUrls: ['./grid-card.component.css']\n})\nexport class GridCardComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","export interface IMovie {\r\n    OriginalName: string;\r\n    assignedName: string;\r\n    year: number;\r\n    getThumbnail(): string;\r\n}\r\nexport class Movie implements IMovie {\r\n    public OriginalName: string;\r\n    public assignedName: string;\r\n    public year: number;\r\n    constructor(OriginalName: string, assignedName: string, year: number) {\r\n        this.OriginalName = OriginalName;\r\n        this.assignedName = assignedName;\r\n        this.year = year;\r\n    }\r\n    getThumbnail(): string {\r\n        return ` ${this.assignedName} || ${this.OriginalName}`;\r\n    }\r\n}\r\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n"],"sourceRoot":""}